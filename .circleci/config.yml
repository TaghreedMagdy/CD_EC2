version: 2.1
# command to recall rollback
# commands:
#   destroy_environment:
#     steps:
#       - run:
#           name: Destroy environment
#            # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
#            # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
#           when: on_fail
#           command: |
#             aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}


jobs:

  # create_and_deploy_frontend:
  #   docker:
  #     - image:  amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Execute bucket.yml - Create Cloudformation Stack
  #         command: |
  #           aws cloudformation deploy \
  #           --template-file bucket.yml \
  #           --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
  #           --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > textfile.txt
      - persist_to_workspace:
          root: .
          paths: 
            - textfile.txt

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: .
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
  

  # create_infrastructure: 
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Create Cloudformation Stack
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file template.yml \
  #             --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
  #             --region us-east-1
  # smoke_test:
  #   docker:
  #     - image:  amazon/aws-cli
  #   steps:
  #     - run: return 1
  #     - destroy_environment

  # configure_infrastructure:
  #   docker:
  #     - image:  python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["78:02:1a:ed:e2:e1:ba:62:aa:b0:88:9f:57:84:13:e8"]
  #     - run:
  #         name: Install Ansible
  #         command: apk add --update ansible
  #     - run:
  #         name: Run Playbook and Configure server
  #         command: ansible-playbook -i inventory main-remote.yml

#the below smoke test was an exercise to fail
  # smoke_test:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - run: apk add --update curl
  #     - run: 
  #         name: smoke test
  #         command: |
  #           URL="https://blog.udacity.com/"
  #           # Test if website exists
  #           if curl -s --head ${URL} 
  #           then
  #             return 0
  #           else
  #             return 1
  #           fi
  #     - run:
  #         command: echo "Pipeline failed"
  #         when: on_fail

workflows:
  say-hello-workflow:
    jobs:
      - promote_to_production
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - get_last_deployment_id
            - promote_to_production
      # - get_last_deployment_id
      # - create_and_deploy_frontend
      # - create_infrastructure
      #- configure_infrastructure
          # requires:
          #   - create_infrastructure
      # - smoke_test:
      #     requires:
      #       - create_infrastructure
